name: Build, Test, and Deploy Spring Boot Application with Docker on EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest  # Sử dụng môi trường Ubuntu mới nhất để thực thi các tác vụ

    steps:
      - name: Check out code  # Bước kiểm tra và lấy mã nguồn từ repository
        uses: actions/checkout@v4  # Sử dụng hành động để checkout code từ repository GitHub

      - name: Set up JDK 17  # Thiết lập môi trường Java 17 để biên dịch và chạy ứng dụng Spring Boot
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Sử dụng bản phân phối Temurin của OpenJDK
          java-version: '17'  # Cài đặt phiên bản Java 17

      - name: Build with Maven  # Biên dịch ứng dụng Spring Boot bằng Maven
        run: mvn clean install  # Chạy lệnh Maven để xây dựng dự án

      - name: Configure AWS credentials  # Thiết lập thông tin xác thực để kết nối với AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Sử dụng thông tin AWS_ACCESS_KEY_ID từ GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Sử dụng thông tin AWS_SECRET_ACCESS_KEY từ GitHub Secrets
          aws-region: us-east-1  # Chỉ định vùng AWS là us-east-1

      - name: Build Docker image  # Tạo Docker image từ mã nguồn của dự án
        run: docker build -t myproject1-app:latest .  # Build Docker image và gắn nhãn "latest"

      - name: Tag Docker image  # Gắn nhãn Docker image để đẩy lên AWS ECR (Elastic Container Registry)
        run: docker tag myproject1-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myproject1-app-repo:latest

      - name: Log in to AWS ECR  # Đăng nhập vào AWS ECR để có thể đẩy Docker image lên
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Push Docker image to AWS ECR  # Đẩy Docker image đã build lên AWS ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myproject1-app-repo:latest

      # SSH vào EC2 và triển khai Docker container
      - name: Deploy Docker container on EC2
        uses: appleboy/ssh-action@v0.1.0  # Sử dụng hành động SSH để kết nối với EC2
        with:
          host: ${{ secrets.EC2_HOST }}  # IP hoặc hostname của EC2 lấy từ GitHub Secrets
          username: ec2-user  # Tài khoản SSH để kết nối với EC2
          key: ${{ secrets.EC2_SSH_KEY }}  # Khóa SSH để xác thực kết nối với EC2
          port: 22  # Cổng SSH (22)

          script: |
            # Cập nhật hệ thống và cài đặt Docker nếu chưa có
            sudo yum update -y  # Cập nhật hệ thống
            sudo amazon-linux-extras install docker -y  # Cài đặt Docker trên EC2
            sudo service docker start  # Khởi động Docker service
            sudo usermod -aG docker ec2-user  # Thêm người dùng ec2-user vào nhóm docker

            # Kích hoạt nhóm docker ngay lập tức trong session này
            newgrp docker  # Kích hoạt quyền sử dụng Docker ngay lập tức

            # Cài đặt Docker Compose (nếu chưa có)
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  # Tải và cài đặt Docker Compose
            sudo chmod +x /usr/local/bin/docker-compose  # Cấp quyền thực thi cho Docker Compose

            # Kiểm tra nếu liên kết mềm tới Docker Compose đã tồn tại, tránh lỗi "File exists"
            if [ ! -f "/usr/bin/docker-compose" ]; then
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            # Xóa container cũ (nếu có) trước khi tạo container mới
            sudo docker rm -f myproject1-container || true  # Xóa container ứng dụng cũ nếu tồn tại
            sudo docker rm -f myproject-mysql || true  # Xóa container MySQL cũ nếu tồn tại

            # Đăng nhập vào ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com  # Đăng nhập vào AWS ECR để pull Docker image

            # Tạo file docker-compose.yml trên EC2 để khởi động MySQL và ứng dụng Spring Boot
            cat <<EOF > docker-compose.yml
            version: '3.8'

            services:
              db:
                image: mysql:8.0  # Sử dụng Docker image của MySQL
                container_name: myproject-mysql  # Tên container MySQL
                environment:
                  MYSQL_ROOT_PASSWORD: MySecurePass2702  # Đặt mật khẩu cho tài khoản root MySQL
                  MYSQL_DATABASE: myprojectdb  # Tạo cơ sở dữ liệu myprojectdb khi MySQL khởi động
                ports:
                  - "3306:3306"  # Mở cổng 3306 cho MySQL
                networks:
                  - myproject-network  # Đặt container MySQL trong network myproject-network
                volumes:
                  - my_db_data:/var/lib/mysql  # Mount volume để lưu trữ dữ liệu của MySQL
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]  # Kiểm tra tình trạng MySQL
                  interval: 10s  # Thực hiện kiểm tra mỗi 10 giây
                  retries: 5  # Thử lại 5 lần nếu kiểm tra thất bại

              app:
                image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myproject1-app-repo:latest  # Sử dụng Docker image của ứng dụng Spring Boot từ AWS ECR
                container_name: myproject1-container  # Tên container của ứng dụng
                environment:
                  SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/myprojectdb  # Cấu hình kết nối tới MySQL
                  SPRING_DATASOURCE_USERNAME: root  # Tên đăng nhập MySQL
                  SPRING_DATASOURCE_PASSWORD: MySecurePass2702  # Mật khẩu MySQL
                ports:
                  - "8080:8080"  # Mở cổng 8080 cho ứng dụng Spring Boot
                depends_on:
                  db:
                    condition: service_healthy  # Đảm bảo MySQL đã sẵn sàng trước khi chạy ứng dụng
                networks:
                  - myproject-network  # Đặt container ứng dụng trong cùng network với MySQL

            networks:
              myproject-network:
                driver: bridge  # Tạo network kiểu bridge để các container giao tiếp với nhau

            volumes:
              my_db_data:  # Tạo volume để lưu trữ dữ liệu MySQL
            EOF

            # Chạy Docker Compose để khởi động MySQL và ứng dụng Spring Boot
            sudo docker-compose up -d  # Khởi động các container ở chế độ nền

            # Đợi MySQL và ứng dụng Spring Boot khởi động
            echo "Waiting for MySQL and Spring Boot to be ready..."
            sleep 60  # Chờ 60 giây để cả MySQL và ứng dụng khởi động

            # Kiểm tra container đang chạy
            sudo docker ps -a  # Liệt kê tất cả các container để kiểm tra tình trạng

            # Kiểm tra logs của Spring Boot container
            sudo docker logs myproject1-container || echo "Failed to retrieve Spring Boot logs"  # Kiểm tra log của container ứng dụng Spring Boot

            # Chạy health check trên ứng dụng Spring Boot bằng IP công cộng của EC2
            curl -v http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8080/actuator/health || echo "Health check failed"  # Kiểm tra sức khỏe của ứng dụng bằng cách truy cập endpoint /actuator/health
