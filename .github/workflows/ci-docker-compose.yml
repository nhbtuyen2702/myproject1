# Tên của workflow này để dễ nhận diện
name: Build, Test, and Deploy Spring Boot Application with Docker Compose

# Kích hoạt workflow khi có sự kiện push hoặc pull request lên nhánh master
on:
  push:
    branches:
      - master  # Kích hoạt khi có push vào nhánh master
  pull_request:
    branches:
      - master  # Kích hoạt khi có pull request vào nhánh master

jobs:
  build:
    runs-on: ubuntu-latest  # Sử dụng runner Ubuntu mới nhất

    steps:
      # 1. Check out mã nguồn từ repository
      # Sử dụng hành động `actions/checkout@v4` để tải mã nguồn của project từ repository vào trong môi trường làm việc của runner.
      - name: Check out code
        uses: actions/checkout@v4
      # Thêm thông tin về thư mục hiện tại và liệt kê file, folder
      - name: List files after checkout
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path after checkout:"
          ls -al

      # 2. Thiết lập JDK
      # Thiết lập môi trường JDK 17 để có thể biên dịch và chạy ứng dụng Java/Spring Boot.
      # 'temurin' là một bản phân phối của OpenJDK được sử dụng phổ biến.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Sử dụng OpenJDK Temurin
          java-version: '17'  # Sử dụng phiên bản Java 17
      # Thêm thông tin về thư mục hiện tại và liệt kê file, folder
      - name: List files after setting up JDK
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path after setting up JDK:"
          ls -al

      # 3. Build ứng dụng với Maven
      # Bước này sẽ biên dịch và đóng gói ứng dụng Spring Boot thành file JAR.
      # 'mvn clean install' sẽ thực hiện việc xóa các file build trước đó, biên dịch, chạy test, và đóng gói ứng dụng.
      - name: Build with Maven
        run: |
          echo "Building the project using Maven..."
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path before building:"
          ls -al
          mvn clean install
          echo "Maven build completed."

      # 4. Đăng nhập Docker Hub
      # Sử dụng thông tin Docker Hub được lưu trong GitHub Secrets để đăng nhập vào Docker Hub trước khi push image.
      - name: Log in to Docker Hub
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path before Docker login:"
          ls -al
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5. Build Docker image
      # Build Docker image từ Dockerfile trong repository và gán thẻ 'myproject1-app:latest'.
      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path:"
          ls -al
          docker build -t myproject1-app:latest .
          echo "Docker image build completed."

      # 6. Liệt kê Docker image
      # Kiểm tra và liệt kê tất cả các image đã được tạo trên môi trường Docker để đảm bảo image được tạo thành công.
      - name: List Docker Images
        run: |
          echo "Listing Docker images to verify build..."
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path:"
          ls -al
          docker images

      # 7. Cài đặt Docker Compose
      # Cài đặt Docker Compose phiên bản mới nhất để có thể sử dụng trong các bước tiếp theo.
      - name: Install Docker Compose
        run: |
          echo "Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version  # Kiểm tra phiên bản Docker Compose đã cài đặt
          echo "Docker Compose installed."

      # 8. Sử dụng Docker Compose để chạy MySQL và Spring Boot
      # File `docker-compose.yml` sẽ được sử dụng để khởi động cả MySQL và Spring Boot trong cùng network.
      - name: Run Docker Compose
        run: |
          echo "Starting Docker Compose with docker-compose.yml..."
          echo "Current working directory: $(pwd)"
          echo "Listing all files and directories in current path before running Docker Compose:"
          ls -al
          docker-compose -f docker-compose.yml up -d --build  # Khởi động MySQL và Spring Boot trong chế độ detached
          echo "Docker Compose started."

      # 9. Chạy kiểm tra trạng thái của các container
      # Liệt kê tất cả các container để kiểm tra trạng thái của chúng sau khi Docker Compose khởi động
      - name: Check Running Docker Containers
        run: |
          echo "Listing all running Docker containers..."
          docker ps -a
          echo "Container status checked."

      # 10. Kiểm tra log của tất cả các container
      # Lấy log từ container chạy ứng dụng Spring Boot và MySQL để kiểm tra trạng thái khởi động.
      - name: Check All Container Logs
        run: |
          echo "Checking logs of all containers..."
          docker logs myproject1-app --details --timestamps || echo "Failed to retrieve Spring Boot logs"
          docker logs myproject-mysql --details --timestamps || echo "Failed to retrieve MySQL logs"
          echo "All container logs checked."

      # 11. Kiểm tra sức khỏe của ứng dụng Spring Boot
      # Sử dụng `curl` để kiểm tra endpoint /actuator/health sau khi Spring Boot đã khởi động
      - name: Run Health Check
        run: |
          echo "Waiting for the application to be ready..."
          sleep 60  # Đợi 60 giây để ứng dụng Spring Boot khởi động hoàn toàn
          echo "Running health check on the application..."
          curl -v http://localhost:8080/actuator/health || echo "Health check failed"
          echo "Health check completed."
